package org.example.dongbina;

public class InsertionSort {
    public static void main(String[] args){
        int i = 0, j = 0, temp = 0;
        int[] arr = {10, 1,42,21,26,23,24, 5, 8, 7, 25,27,29,28,39,6, 4,20,18,43, 3, 2, 9,11,12,13,14,15,17,16,19,30};
        int ms = 0;
        for(i = 0; i < arr.length-1; i++){
            //j = i 에서부터 정렬
            j = i;


            //만약 j번째 데이터가 j+1 번째 데이터보다 크면
            /*
            만약 i 가 5일 때
            23과 24를 비교후 j > j + 1 이 아니니까 while 문이 수행되지 않음
            만약 i 가 6일 때 j = i = 6
            24 와 5을 비교함 j > j + 1 이니까 24 랑 5가 스왑{
                j 가 - 1 이 되면서 계속 5로 다음 값을 비교함
                j = 5 가 되었으니 5번째 자리의 23 과 6번째 자리로 바뀐 5와 비교
                j > j + 1 이 성립하니 둘이 스왑
                이런식으로 자기보다 작은 수를 만날 때까지 스왑을 계속함
                일부 배열이 정렬이 되어있는 상태라면 그 구간은 정렬하지않고 넘어감
            }
            * */
            while(j >= 0 && arr[j] > arr[j+1]){
                ms++;
                temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
                //j번째 데이터와 j+1 번째 데이터를 바꿈
                j--;
                //그리고 j -1
                // 여기서 이게 구현됨 -->> 5는 _ 1 _ 10 _ 5 이렇게 총 3군데 삽입 될 수 있음
            }
        }

        for(i = 0; i<arr.length; i++){
            System.out.println("arr[i] = " + arr[i]);
        }
        System.out.println("ms = " + ms);
    }
}
/*
* 1 10 5 8 7 6 4 3 2 9
이미 정렬이 되어있다 가정한다
* 1은 이미 정렬이 되어있기 때문에 가만히 놔둠
* _ 1 _ 언더바의 위치가 삽입 될 위치 삽입 될 위치가 두군데
* 10은 1의 앞과 뒤에 삽입 될 수 있음 10은 1보다 크기때문에 1의 뒤에 위치 따라서 가만히 놔둠
* 5는 _ 1 _ 10 _ 5 이렇게 총 3군데 삽입 될 수 있음
* 10은 5보다 작고 1보다 크기 때문에 1 과 10 사이인 1 5 10 으로 삽입되게 된다
* 8은 앞에 4자리가 생김 10보다 작고 5보다 크기 때문에 그 사이로 삽입
*
* 1번째 값부터 정렬을 진행 하는데 자기보다 작은 값을 만날 때만 삽입을 진행
*
* 버블 정렬의 경우엔 이미 정렬이 되어 있더라도 탐색을 시작함 - 탐색 결과가 변화가 없을 수있음
*
* 삽입 정렬의 경우 현재 값에서 앞으로 탐색 하면서 더 작은 값을 만날 때까지 탐색을 하고 더 작은 값이 나오면 데이터를 삽입
 * */